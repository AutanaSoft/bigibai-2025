---
import Layout from "@/layouts/Layout.astro"
import Header from "@/sections/Header.astro"
import Footer from "@/sections/Footer.astro"
import Button from "@/components/Button.astro"
import { actions } from "astro:actions"
---

<Layout>
  <div class="flex min-h-screen flex-col">
    <Header />

    <main class="flex-1 flex items-center justify-center px-4 py-8">
      <div class="w-full max-w-md mx-auto">
        <!-- Estado sin sesión: Opciones de login -->
        <div id="login-section" class="space-y-6">
          <div class="text-center">
            <h1 class="text-3xl text-white mb-2">¡Únete a Big Ibai!</h1>
            <p class="text-white/70">
              Inicia sesión para validar tus cupones y participar
            </p>
          </div>

          <!-- Botón de Google -->
          <Button
            id="google-login-btn"
            variant="brand"
            size="lg"
            class="w-full justify-center gap-3"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
              ></path>
              <path
                fill="currentColor"
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
              ></path>
              <path
                fill="currentColor"
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
              ></path>
              <path
                fill="currentColor"
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
              ></path>
            </svg>
            Continuar con Google
          </Button>

          <!-- Separador -->
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-white/20"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-black text-white/70">o</span>
            </div>
          </div>

          <!-- Formulario Magic Link -->
          <form id="magic-link-form" class="space-y-4">
            <div>
              <label for="email" class="sr-only">Correo electrónico</label>
              <input
                type="email"
                id="email"
                name="email"
                required
                autocomplete="email"
                inputmode="email"
                placeholder="tu@email.com"
                class="w-full px-4 py-3 rounded-lg bg-black/50 border border-brand/50 backdrop-blur-lg text-white placeholder:text-white/50 focus:outline-none focus:ring-2 focus:ring-brand focus:border-transparent transition-all"
              />
            </div>
            <Button type="submit" variant="secondary" size="lg" class="w-full">
              Enviar enlace mágico
            </Button>
          </form>
        </div>

        <!-- Estado con sesión: Formulario de cupón -->
        <div id="coupon-section" class="space-y-6 hidden">
          <div class="text-center">
            <h1 class="text-3xl text-white mb-2">¡Bienvenido!</h1>
            <p class="text-white/70">
              Introduce tu código de cupón para participar
            </p>
            <div
              id="coupon-count"
              class="mt-4 text-brand font-semibold text-lg"
            >
              <!-- Se llenará dinámicamente -->
            </div>
          </div>

          <form id="coupon-form" class="space-y-4">
            <div>
              <label for="coupon" class="sr-only">Código del cupón</label>
              <input
                type="text"
                id="coupon"
                name="coupon"
                required
                maxlength="14"
                placeholder="XXXX-XXXX-XXXX"
                class="w-full px-4 py-3 rounded-lg bg-black/50 border border-brand/50 backdrop-blur-lg text-white placeholder:text-white/50 focus:outline-none focus:ring-2 focus:ring-brand focus:border-transparent transition-all text-center text-lg tracking-widest font-mono"
              />
              <p class="text-xs text-white/50 mt-2 text-center">
                Formato: 4 letras/números - 4 letras/números - 4 letras/números
              </p>
            </div>

            <Button type="submit" variant="brand" size="lg" class="w-full">
              Validar cupón
            </Button>
          </form>

          <div class="text-center">
            <Button
              id="logout-btn"
              variant="ghost"
              size="sm"
              class="text-white/70 hover:text-white"
            >
              Cerrar sesión
            </Button>
          </div>
        </div>

        <!-- Mensajes de estado -->
        <div id="message-container" class="mt-6">
          <div
            id="message"
            class="invisible bg-gradient-to-bl from-yellow-400 font-semibold to-orange-300 shadow shadow-amber-200 block px-5 py-2 ring-4 ring-white/20 text-sm transition duration-300 hover:scale-105 cursor-crosshair text-center opacity-0 mx-10 rounded-lg translate-y-3 scale-90 relative"
          >
          </div>
        </div>
      </div>
    </main>

    <Footer />
  </div>
</Layout>

<style>
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes shimmer {
    0% {
      background-position: 0% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  @keyframes shake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-5px);
    }
    75% {
      transform: translateX(5px);
    }
  }

  @keyframes bounce-in {
    0% {
      opacity: 0;
      transform: scale(0.3) translateY(-20px);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.95);
    }
    100% {
      transform: scale(1) translateY(0);
    }
  }

  @keyframes pulse-ring {
    0% {
      box-shadow: 0 0 0 0 rgba(248, 177, 52, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(248, 177, 52, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(248, 177, 52, 0);
    }
  }

  .spinner {
    animation: spin 1s linear infinite;
  }

  .submit-button {
    position: relative;
    overflow: hidden;
    background: linear-gradient(
      90deg,
      #f8b134 25%,
      #ffd700 50%,
      #f8b134 75%
    ) !important;
    background-size: 300% 100% !important;
    animation: shimmer 3s linear infinite;
  }

  .submit-button:hover {
    animation: shimmer 1.5s linear infinite;
  }

  .submit-button:active {
    animation: none;
  }

  .error-shake {
    animation: shake 0.5s ease-in-out;
  }

  .success-bounce {
    animation: bounce-in 0.6s ease-out;
  }

  .pulse-effect {
    animation: pulse-ring 1.5s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;
  }

  .message-container {
    transition: all 0.3s ease;
    min-height: 24px;
  }
</style>

<script>
  import { supabaseClient } from "@/supabase"
  import { actions, isInputError } from "astro:actions"
  import { throwConfetti } from "@/utils/confetti"

  // Elementos del DOM
  const loginSection = document.getElementById(
    "login-section"
  ) as HTMLDivElement
  const couponSection = document.getElementById(
    "coupon-section"
  ) as HTMLDivElement
  const googleLoginBtn = document.getElementById(
    "google-login-btn"
  ) as HTMLButtonElement
  const magicLinkForm = document.getElementById(
    "magic-link-form"
  ) as HTMLFormElement
  const couponForm = document.getElementById("coupon-form") as HTMLFormElement
  const logoutBtn = document.getElementById("logout-btn") as HTMLButtonElement
  const couponInput = document.getElementById("coupon") as HTMLInputElement
  const message = document.getElementById("message") as HTMLDivElement
  const couponCount = document.getElementById("coupon-count") as HTMLDivElement

  let currentUser: any = null
  let userCouponCount = 0

  // Función para mostrar mensajes
  function showMessage(text: string, isError = false) {
    message.textContent = text
    message.classList.remove("invisible")
    message.classList.add("opacity-100")
    message.classList.add("translate-y-0")
    message.classList.add("scale-100")

    if (isError) {
      message.classList.remove(
        "from-yellow-400",
        "to-orange-300",
        "shadow",
        "shadow-amber-200"
      )
      message.classList.add(
        "from-red-400",
        "to-pink-600",
        "shadow",
        "shadow-pink-400",
        "text-white"
      )
    } else {
      message.classList.remove(
        "from-red-400",
        "to-pink-600",
        "shadow",
        "shadow-pink-400",
        "text-white"
      )
      message.classList.add(
        "from-yellow-400",
        "to-orange-300",
        "shadow",
        "shadow-amber-200",
        "text-black"
      )
    }
  }

  // Función para ocultar mensajes
  function hideMessage() {
    message.classList.add("invisible")
    message.classList.remove("opacity-100", "translate-y-0", "scale-100")
  }

  // Función para formatear el cupón automáticamente
  function formatCouponInput(input: HTMLInputElement) {
    let value = input.value.toUpperCase().replace(/[^A-Z0-9]/g, "")

    if (value.length > 12) {
      value = value.substring(0, 12)
    }

    // Insertar guiones automáticamente
    if (value.length > 4) {
      value = value.substring(0, 4) + "-" + value.substring(4)
    }
    if (value.length > 9) {
      value = value.substring(0, 9) + "-" + value.substring(9)
    }

    input.value = value
  }

  // Función para actualizar la UI según el estado de sesión
  async function updateUI() {
    const {
      data: { session },
    } = await supabaseClient.auth.getSession()

    if (session?.user) {
      currentUser = session.user
      loginSection.classList.add("hidden")
      couponSection.classList.remove("hidden")

      // Obtener el número de cupones del usuario
      await updateCouponCount()
    } else {
      currentUser = null
      loginSection.classList.remove("hidden")
      couponSection.classList.add("hidden")
      hideMessage()
    }
  }

  // Función para actualizar el contador de cupones
  async function updateCouponCount() {
    if (!currentUser) return

    try {
      const {
        data: { user },
      } = await supabaseClient.auth.getUser()
      if (!user) return

      const { data: coupons } = await supabaseClient
        .from("coupons")
        .select("id")
        .eq("used_by", user.id)
        .eq("is_used", true)

      userCouponCount = coupons?.length || 0

      if (userCouponCount === 0) {
        couponCount.textContent = "Aún no tienes cupones validados"
      } else if (userCouponCount === 1) {
        couponCount.textContent = "Tienes 1 participación activa"
      } else {
        couponCount.textContent = `Tienes ${userCouponCount} participaciones activas`
      }
    } catch (error) {
      console.error("Error al obtener cupones:", error)
    }
  }

  // Función para iniciar sesión con Google
  async function signInWithGoogle() {
    try {
      const { error } = await supabaseClient.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: `${window.location.origin}/registro`,
        },
      })

      if (error) {
        showMessage("Error al iniciar sesión con Google", true)
      }
    } catch (error) {
      showMessage("Error al iniciar sesión con Google", true)
    }
  }

  // Función para enviar Magic Link
  async function sendMagicLink(email: string) {
    try {
      const { error } = await supabaseClient.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/registro`,
        },
      })

      if (error) {
        showMessage("Error al enviar el enlace mágico", true)
      } else {
        showMessage(
          "¡Revisa tu email! Te hemos enviado un enlace para iniciar sesión"
        )
      }
    } catch (error) {
      showMessage("Error al enviar el enlace mágico", true)
    }
  }

  // Función para cerrar sesión
  async function signOut() {
    try {
      const { error } = await supabaseClient.auth.signOut()
      if (error) {
        showMessage("Error al cerrar sesión", true)
      } else {
        hideMessage()
        await updateUI()
      }
    } catch (error) {
      showMessage("Error al cerrar sesión", true)
    }
  }

  // Función para validar cupón
  async function validateCoupon(coupon: string) {
    if (!currentUser) {
      showMessage("Debes iniciar sesión para validar cupones", true)
      return
    }

    try {
      const {
        data: { session },
      } = await supabaseClient.auth.getSession()
      if (!session?.access_token) {
        showMessage(
          "Sesión inválida. Por favor, inicia sesión nuevamente",
          true
        )
        return
      }

      const { data, error } = await actions.validateCoupon({ coupon })

      if (error) {
        const messageText = isInputError(error)
          ? error?.fields?.coupon?.join(", ")
          : error.message
        showMessage(messageText || "Error al validar el cupón", true)
      } else if (data) {
        throwConfetti()
        showMessage(data.message)
        couponInput.value = ""
        await updateCouponCount()
      }
    } catch (error) {
      console.error("Error al validar cupón:", error)
      showMessage("Error al validar el cupón", true)
    }
  }

  // Event listeners
  googleLoginBtn.addEventListener("click", signInWithGoogle)

  magicLinkForm.addEventListener("submit", async (e) => {
    e.preventDefault()
    const formData = new FormData(magicLinkForm)
    const email = formData.get("email") as string

    if (email) {
      await sendMagicLink(email)
    }
  })

  couponForm.addEventListener("submit", async (e) => {
    e.preventDefault()
    const formData = new FormData(couponForm)
    const coupon = formData.get("coupon") as string

    if (coupon) {
      await validateCoupon(coupon)
    }
  })

  logoutBtn.addEventListener("click", signOut)

  couponInput.addEventListener("input", (e) => {
    formatCouponInput(e.target as HTMLInputElement)
  })

  // Escuchar cambios en la autenticación
  supabaseClient.auth.onAuthStateChange(async (event, session) => {
    if (event === "SIGNED_IN" || event === "SIGNED_OUT") {
      await updateUI()
    }
  })

  // Inicializar la UI
  document.addEventListener("DOMContentLoaded", async () => {
    await updateUI()
  })
</script>
